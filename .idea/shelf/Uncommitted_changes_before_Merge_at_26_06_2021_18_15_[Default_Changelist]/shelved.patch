Index: src/main/java/com/ossapp/mainapp/controllers/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ossapp.mainapp.controllers;\r\n\r\nimport com.ossapp.mainapp.dto.RequestUserDto;\r\nimport com.ossapp.mainapp.dto.ResponseUserDto;\r\nimport com.ossapp.mainapp.entities.User;\r\nimport com.ossapp.mainapp.service.UserService;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n\r\nimport javax.validation.Valid;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/v1/users\")\r\npublic class UserController {\r\n    private final UserService userService;\r\n\r\n    public UserController(UserService userService) {\r\n        this.userService = userService;\r\n    }\r\n\r\n    @GetMapping\r\n    public List<ResponseUserDto> getAllUsers(@RequestParam(required = false) Map<String, String> requestParams) {\r\n        int pageNumber = Integer.parseInt(requestParams.getOrDefault(\"page\", \"0\"));\r\n        return userService.findAll(pageNumber);\r\n    }\r\n\r\n    @GetMapping(\"/{id}\")\r\n    public ResponseEntity<ResponseUserDto> getUserById(@PathVariable(\"id\") Long id) {\r\n        return new ResponseEntity<>(userService.findById(id), HttpStatus.OK);\r\n    }\r\n\r\n    @PostMapping\r\n    public ResponseEntity<RequestUserDto> post(@RequestBody @Valid RequestUserDto requestUserDto) {\r\n        userService.save(requestUserDto);\r\n        return new ResponseEntity<>(requestUserDto, HttpStatus.OK);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/ossapp/mainapp/controllers/UserController.java b/src/main/java/com/ossapp/mainapp/controllers/UserController.java
--- a/src/main/java/com/ossapp/mainapp/controllers/UserController.java	(revision 0174787c42462938825fb42423c180fb2975417f)
+++ b/src/main/java/com/ossapp/mainapp/controllers/UserController.java	(date 1624720520179)
@@ -2,13 +2,14 @@
 
 import com.ossapp.mainapp.dto.RequestUserDto;
 import com.ossapp.mainapp.dto.ResponseUserDto;
-import com.ossapp.mainapp.entities.User;
 import com.ossapp.mainapp.service.UserService;
+import com.ossapp.mainapp.utils.UserFilter;
+import io.swagger.annotations.ApiImplicitParam;
+import io.swagger.annotations.ApiImplicitParams;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.*;
 
-
 import javax.validation.Valid;
 import java.util.List;
 import java.util.Map;
@@ -22,10 +23,64 @@
         this.userService = userService;
     }
 
+    @ApiImplicitParams(value = {
+            @ApiImplicitParam(name = "ageBefore", type = "String", required = false, paramType = "query"),
+            @ApiImplicitParam(name = "ageAfter", type = "String", required = false, paramType = "query")
+    })
     @GetMapping
     public List<ResponseUserDto> getAllUsers(@RequestParam(required = false) Map<String, String> requestParams) {
+//            @RequestParam(value = "ageBefore", required = false) Integer ageBefore,
+//            @RequestParam(value = "ageAfter", required = false) Integer ageAfter,
+//            @RequestParam(value = "style", required = false) Integer style,
+//            @RequestParam(value = "level", required = false) Integer level,
+//            @RequestParam(value = "sex", required = false) Integer sex,
+//            @RequestParam(value = "weight", required = false) Integer weight,
+//            @RequestParam(value = "cityId", required = false) Integer cityId,
+
+//            @RequestParam(value = "page", defaultValue = "0") Integer page,
+//            @RequestParam(value = "size", defaultValue = "9") Integer size,
         int pageNumber = Integer.parseInt(requestParams.getOrDefault("page", "0"));
-        return userService.findAll(pageNumber);
+        int sizeNumber = Integer.parseInt(requestParams.getOrDefault("size", "10"));
+
+        Integer ageBefore = null;
+        Integer ageAfter = null;
+        Long cityId = null;
+        Long style = null;
+        Integer level = null;
+        Integer sex = null;
+        Integer weight = null;
+
+        if (requestParams.containsKey("ageBefore") || requestParams.containsKey("ageAfter")) {
+            ageBefore = Integer.parseInt(requestParams.getOrDefault("ageBefore", "150"));
+            ageAfter = Integer.parseInt(requestParams.getOrDefault("ageAfter", "1"));
+        }
+
+        if (requestParams.containsKey("cityId")) {
+            //TODO поиск после добаления Security через UserDetails client = (UserDetails) auth.getPrincipal();
+            // long id = ((User) client).getUserId();
+            Long userCity = userService.findCityIdByUserId(1L);
+            cityId = Long.parseLong(requestParams.getOrDefault("cityId", userCity.toString()));
+        }
+
+        if (requestParams.containsKey("style")) {
+            style = Long.parseLong(requestParams.getOrDefault("style", "1"));
+        }
+
+        if (requestParams.containsKey("level")) {
+            level = Integer.parseInt(requestParams.getOrDefault("level", "1"));
+        }
+
+        if (requestParams.containsKey("sex")) {
+            sex = Integer.parseInt(requestParams.getOrDefault("sex", "1"));
+        }
+
+        if (requestParams.containsKey("weight")) {
+            weight = Integer.parseInt(requestParams.getOrDefault("weight", "1"));
+        }
+
+        UserFilter userFilter = new UserFilter(ageBefore, ageAfter, cityId, style, level, sex, weight);
+
+        return userService.findAll(userFilter.getSpec(), pageNumber, sizeNumber);
     }
 
     @GetMapping("/{id}")
